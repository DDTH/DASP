<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd"
	default-lazy-init="false">

	<!-- Use only one of the following three -->
	<!-- for in-memory queue & pub/sub (using Google Guava library) -->
	<!-- <import resource="hetty-guava/hetty.xml" /> -->

	<!-- for Hazelcast queue & pub/sub -->
	<!-- <import resource="hetty-hazelcast/hetty.xml" /> -->

	<!-- for Redis queue & pub/sub -->
	<import resource="hetty-redis/hetty.xml" />

	<!-- Frontend server: Hetty Connection server accepts HTTP connections on 
		"port", and put requests to a queue via "queueWriter" -->
	<bean id="_hettyConnServer" class="ddth.dasp.hetty.front.HettyConnServer"
		scope="singleton" init-method="init" destroy-method="destroy">
		<property name="queueWriter" ref="HETTY_QUEUE_WRITER" />
		<property name="messageFactory" ref="HETTY_MESSAGE_FACTORY" />
		<property name="readTimeoutMillisecs" ref="_nettyReadTimeout" />
		<property name="writeTimeoutMillisecs" ref="_nettyWriteTimeout" />
		<property name="port" value="8083,8085,8087" /> <!-- server chooses first available port -->
		<property name="numWorkers" ref="_numWorkersConn" />
	</bean>

	<!-- Backend server: Hetty Request Handler Server reads requests from a 
		queue via "queueReader", handles the request, and publish the response via 
		"topicPublisher" -->
	<bean id="_hettyDaspRequestHandlerServer" class="ddth.dasp.hetty.back.HettyRequestHandlerServer"
		scope="singleton" init-method="start" destroy-method="destroy">
		<property name="queueReader" ref="HETTY_QUEUE_READER" />
		<property name="queueName">
			<util:constant static-field="ddth.dasp.hetty.HettyConstants.DEFAULT_HETTY_QUEUE" />
		</property>
		<property name="topicPublisher" ref="HETTY_TOPIC_PUBLISHER" />
		<property name="topicName">
			<util:constant static-field="ddth.dasp.hetty.HettyConstants.DEFAULT_HETTY_TOPIC" />
		</property>
		<property name="messageFactory" ref="HETTY_MESSAGE_FACTORY" />
		<property name="requestParser" ref="HETTY_REQUEST_PARSER" />
		<property name="readTimeoutMillisecs" value="0" />
		<property name="writeTimeoutMillisecs" value="0" />
		<property name="numWorkers" ref="_numWorkersRequestHandler" />
	</bean>

	<bean id="HETTY_MESSAGE_FACTORY" class="ddth.dasp.hetty.message.protobuf.ProtoBufMessageFactory"
		scope="singleton">
	</bean>

	<bean name="_dummy_pool_pubsub_config_" class="java.lang.String">
		<constructor-arg>
			<value><![CDATA[
	        (Pool, Pub/Sub) Pool configuration (if you run everything in one box):
	            max possible number of active connections (busy) := _numWorkersConn + _numWorkersRequestHandler*2 + 1
	            min active connections (idle)                    := _numWorkersConn + _numWorkersRequestHandler + 1 
	        where:
	            *2 is when number of publishing threads = number of request handler workers
	            +1 is for response service (subscriber)
	        ]]></value>
		</constructor-arg>
	</bean>

	<beans default-lazy-init="false"><!-- non-production environments -->
		<bean id="HETTY_REQUEST_PARSER" class="ddth.dasp.hetty.message.HettyRequestParser"
			scope="singleton"></bean>
		<bean id="_nettyReadTimeout" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="60000" />
		</bean>
		<bean id="_nettyWriteTimeout" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="60000" />
		</bean>
		<bean id="_numWorkersConn" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="1" />
		</bean>
		<bean id="_numWorkersRequestHandler" class="java.lang.Integer"
			scope="singleton">
			<constructor-arg value="2" />
		</bean>
		<bean id="_poolMaxActives" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="8" /><!-- "1+2*2+1+2" -->
		</bean>
		<bean id="_poolMinIdles" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="4" /><!-- "1+2+1" -->
		</bean>
		<bean id="_poolMaxIdles" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="6" /><!-- "1+2*2+1" -->
		</bean>
		<bean id="_queueSizeThreshold" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="100" />
		</bean>
	</beans>

	<beans default-lazy-init="false" profile="prod,production"><!-- production environment -->
		<bean id="HETTY_REQUEST_PARSER" class="ddth.dasp.hetty.message.HettyRequestParser"
			scope="singleton"></bean>
		<bean id="_nettyReadTimeout" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="10000" />
		</bean>
		<bean id="_nettyWriteTimeout" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="10000" />
		</bean>
		<bean id="_numWorkersConn" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="2" />
		</bean>
		<bean id="_numWorkersRequestHandler" class="java.lang.Integer"
			scope="singleton">
			<constructor-arg value="4" />
		</bean>
		<bean id="_poolMaxActives" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="13" /><!-- 2+4*2+1+2 -->
		</bean>
		<bean id="_poolMinIdles" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="7" /><!-- 2+4+1 -->
		</bean>
		<bean id="_poolMaxIdles" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="11" /><!-- 2+4*2+1 -->
		</bean>
		<bean id="_queueSizeThreshold" class="java.lang.Integer" scope="singleton">
			<constructor-arg value="1000" />
		</bean>
	</beans>
</beans>
